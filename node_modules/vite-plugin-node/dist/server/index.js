"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMiddleware = exports.getPluginConfig = exports.SUPPORTED_FRAMEWORKS = exports.debugServer = void 0;
const chalk_1 = __importDefault(require("chalk"));
const process_1 = require("process");
const __1 = require("..");
const utils_1 = require("../utils");
const express_1 = require("./express");
const nest_1 = require("./nest");
const koa_1 = require("./koa");
const fastify_1 = require("./fastify");
exports.debugServer = utils_1.createDebugger('vite:node-plugin:server');
exports.SUPPORTED_FRAMEWORKS = {
    'express': express_1.ExpressHandler,
    'nest': nest_1.NestHandler,
    'koa': koa_1.KoaHandler,
    'fastify': fastify_1.FastifyHandler
};
const getPluginConfig = (server) => {
    const plugin = server.config.plugins.find((p) => p.name === __1.PLUGIN_NAME);
    if (!plugin) {
        console.error('Please setup VitePluginNode in your vite.config.js first');
        process_1.exit(1);
    }
    return plugin.config({}, { command: 'serve', mode: '' }).VitePluginNodeConfig;
};
exports.getPluginConfig = getPluginConfig;
const getRequestHandler = (handler) => {
    let requestHandler;
    if (typeof handler === 'function') {
        exports.debugServer(chalk_1.default.dim `server config set to custom`);
        requestHandler = handler;
    }
    else {
        exports.debugServer(chalk_1.default.dim `creating ${handler} node server`);
        requestHandler = exports.SUPPORTED_FRAMEWORKS[handler];
    }
    return requestHandler;
};
const createMiddleware = (server) => {
    const config = exports.getPluginConfig(server);
    const logger = server.config.logger;
    const requestHandler = getRequestHandler(config.adapter);
    if (!requestHandler) {
        console.error('Failed to find a request handler');
        process.exit(1);
    }
    return async function (req, res) {
        const appModule = await server.ssrLoadModule(config.appPath);
        let app = appModule[config.exportName];
        if (!app) {
            logger.error(`Failed to find a named export ${config.exportName} from ${config.appPath}`);
            process.exit(1);
        }
        else {
            // some app may be created with a function returning a promise
            app = await app;
            await requestHandler(app, req, res);
        }
    };
};
exports.createMiddleware = createMiddleware;
//# sourceMappingURL=index.js.map